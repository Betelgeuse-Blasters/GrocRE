// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model sessions {
  id          Int    @id @unique @default(autoincrement())
  user        User   @relation(fields: [userId], references: [id])
  sessionHash String
  userId      Int
}

model User {
  id               Int                @id @unique @default(autoincrement())
  name             String
  email            String             @unique
  nickname         String             @unique
  password         String
  createdMeals     Recipe[]           @relation("UserCreatedMeals")
  savedMeals       Recipe[]           @relation("UserSavedMeals")
  mealPlans        MealPlan[]
  posts            Post[]
  UserSavedMeals   UserSavedMeals[]
  UserCreatedMeals UserCreatedMeals[]
  LikesDislikes    LikesDislikes[]
  Comments         Comment[]
  sessions         sessions[]
}

model Recipe {
  id                Int                @id @unique @default(autoincrement())
  recipeName        String
  recipeDescription String
  recipeSteps       Json
  servingSize       Int
  nutritionFacts    Json
  ingredients       Json
  creator           User?              @relation("UserCreatedMeals", fields: [creatorId], references: [id])
  creatorId         Int?
  savedBy           User[]             @relation("UserSavedMeals")
  mealPlans         MealPlan[]         @relation("MealPlanToRecipe")
  posts             Post[]
  MealPlanToRecipe  MealPlanToRecipe[]
  UserSavedMeals    UserSavedMeals[]
  UserCreatedMeals  UserCreatedMeals[]
}

model MealPlan {
  id               Int                @id @unique @default(autoincrement())
  name             String
  description      String?
  user             User?              @relation(fields: [userId], references: [id])
  userId           Int?
  recipes          Recipe[]           @relation("MealPlanToRecipe")
  posts            Post[]
  MealPlanToRecipe MealPlanToRecipe[]
}

model MealPlanToRecipe {
  mealPlanId Int
  recipeId   Int
  mealPlan   MealPlan @relation(fields: [mealPlanId], references: [id])
  recipe     Recipe   @relation(fields: [recipeId], references: [id])

  @@id([mealPlanId, recipeId])
}

model UserSavedMeals {
  id       Int    @id @unique @default(autoincrement())
  userId   Int
  recipeId Int
  user     User   @relation(fields: [userId], references: [id])
  recipe   Recipe @relation(fields: [recipeId], references: [id])
}

model UserCreatedMeals {
  id       Int    @id @unique @default(autoincrement())
  userId   Int
  recipeId Int
  user     User   @relation(fields: [userId], references: [id])
  recipe   Recipe @relation(fields: [recipeId], references: [id])
}

model Post {
  id         Int             @id @unique @default(autoincrement())
  title      String
  summary    String
  createdBy  User            @relation(fields: [userId], references: [id])
  createdAt  DateTime        @default(now())
  mealId     Int?
  mealPlanId Int?
  type       Boolean
  likes      LikesDislikes[]
  photos     Photo[]
  comments   Comment[]
  meal       Recipe?         @relation(fields: [mealId], references: [id])
  mealPlan   MealPlan?       @relation(fields: [mealPlanId], references: [id])
  userId     Int
}

model LikesDislikes {
  id     Int     @id @unique @default(autoincrement())
  postId Int
  isLike Boolean
  post   Post    @relation(fields: [postId], references: [id])
  User   User?   @relation(fields: [userId], references: [id])
  userId Int?
}

model Photo {
  id      Int    @id @unique @default(autoincrement())
  postId  Int
  url     String
  altText String @default("")
  post    Post   @relation(fields: [postId], references: [id])
}

model Comment {
  id      Int    @id @unique @default(autoincrement())
  postId  Int
  content String
  post    Post   @relation(fields: [postId], references: [id])
  User    User?  @relation(fields: [userId], references: [id])
  userId  Int?
}
